
create extension if not exists pgcrypto;
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  full_name text,
  role text check (role in ('tutor','student','admin')) default 'student',
  avatar_url text,
  created_at timestamptz default now()
);
create table if not exists public.courses (
  id uuid primary key default gen_random_uuid(),
  tutor_id uuid not null references public.profiles(id) on delete cascade,
  title text not null,
  description text,
  cover_url text,
  video_url text,
  is_published boolean default false,
  created_at timestamptz default now()
);
create table if not exists public.lessons (
  id uuid primary key default gen_random_uuid(),
  course_id uuid not null references public.courses(id) on delete cascade,
  title text not null,
  body_md text,
  material_url text,
  sort_order int default 0,
  created_at timestamptz default now()
);
create table if not exists public.enrollments (
  id uuid primary key default gen_random_uuid(),
  course_id uuid not null references public.courses(id) on delete cascade,
  student_id uuid not null references public.profiles(id) on delete cascade,
  created_at timestamptz default now(),
  unique (course_id, student_id)
);
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  course_id uuid not null references public.courses(id) on delete cascade,
  sender_id uuid not null references public.profiles(id) on delete cascade,
  content text not null,
  created_at timestamptz default now()
);
create table if not exists public.orders (
  id uuid primary key default gen_random_uuid(),
  course_id uuid not null references public.courses(id) on delete cascade,
  buyer_id uuid not null references public.profiles(id) on delete cascade,
  amount_cents int not null default 0,
  status text check (status in ('test','paid','failed')) default 'test',
  created_at timestamptz default now()
);
alter table public.profiles enable row level security;
alter table public.courses enable row level security;
alter table public.lessons enable row level security;
alter table public.enrollments enable row level security;
alter table public.messages enable row level security;
alter table public.orders enable row level security;
create policy profile_self_select on public.profiles for select using (auth.uid() = id or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='admin'));
create policy profile_self_update on public.profiles for update using (auth.uid() = id);
create policy courses_read on public.courses for select using (is_published = true or tutor_id = auth.uid() or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy courses_insert on public.courses for insert with check (tutor_id = auth.uid() and exists (select 1 from public.profiles p where p.id=auth.uid() and p.role in ('tutor','admin')));
create policy courses_modify on public.courses for update using (tutor_id = auth.uid() or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy courses_delete on public.courses for delete using (tutor_id = auth.uid() or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy lessons_read on public.lessons for select using (exists (select 1 from public.courses c where c.id=course_id and (c.is_published = true or c.tutor_id = auth.uid())) or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy lessons_write on public.lessons for all using (exists (select 1 from public.courses c where c.id=course_id and c.tutor_id = auth.uid()) or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin')) with check (exists (select 1 from public.courses c where c.id=course_id and c.tutor_id = auth.uid()) or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy enrollments_read on public.enrollments for select using (student_id = auth.uid() or exists (select 1 from public.courses c where c.id=course_id and c.tutor_id=auth.uid()) or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy enrollments_insert on public.enrollments for insert with check (student_id = auth.uid());
create policy messages_read on public.messages for select using (exists (select 1 from public.enrollments e where e.course_id=course_id and (e.student_id = auth.uid())) or exists (select 1 from public.courses c where c.id=course_id and c.tutor_id = auth.uid()) or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy messages_insert on public.messages for insert with check (exists (select 1 from public.enrollments e where e.course_id=course_id and e.student_id = auth.uid()) or exists (select 1 from public.courses c where c.id=course_id and c.tutor_id = auth.uid()));
create policy orders_read on public.orders for select using (buyer_id = auth.uid() or exists (select 1 from public.courses c where c.id=course_id and c.tutor_id=auth.uid()) or exists (select 1 from public.profiles p where p.id=auth.uid() and p.role='admin'));
create policy orders_insert on public.orders for insert with check (buyer_id = auth.uid());
